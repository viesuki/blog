<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ANIMEs</title>
      <link href="/posts/48590ca0.html"/>
      <url>/posts/48590ca0.html</url>
      
        <content type="html"><![CDATA[<p>等等再说</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Free domains</title>
      <link href="/posts/fdfbe8a3.html"/>
      <url>/posts/fdfbe8a3.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://js.org">js.org</a> - Free .js.org domain (need to relate to JavaScript).</li><li><a href="https://freenom.com/">Freenom</a> — Free .tk,.ml,.ga,.cf and .gq domain.</li><li><a href="https://open-domains.net/">Open Domains</a> - Free subdomains for personal sites, open-source projects, and more.</li><li><a href="https://nic.eu.org/">eu.org</a> — Free <a href="http://eu.org">eu.org</a> domain. Request is usually approved in 14 days.</li><li><a href="https://github.com/willin/js.cool">js.cool</a> - Free js.cool subdomains for GitHub Pages and Vercel.</li><li><a href="https://nic.ua/">pp.ua</a> — Free <a href="http://pp.ua">pp.ua</a> subdomains.</li><li><a href="https://thedev.id/">thedev.id</a> — A free <a href="http://thedev.id">thedev.id</a> subdomain for developers.</li><li><a href="https://www.is-a.dev/">is-a.dev</a> — Free is-a.dev subdomain for developers.</li><li><a href="https://is-a-good.dev/">is-a-good.dev</a> — A free is-a-good-dev subdomain for developers.</li><li><a href="https://github.com/Olivr/free-domain">cluster.ws &amp; wip.la</a> — Free <a href="http://cluster.ws">cluster.ws</a> and <a href="http://wip.la">wip.la</a> subdomains for developers.</li><li><a href="https://domain.dee.al/">Dee.al</a> — Free .dee.al,.gal.aw,.devz.id instant domain for your blog site &amp; Other, ENJOY</li><li><a href="https://github.com/tarampampam/free-domains">is-an.app &amp; 1bt.uk</a> - Free .is-an.app and .1bt.uk subdomains (wildcards, A, NS, AAAA, CNAME, TXT records are supported).</li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>科学上网交流学习</title>
      <link href="/posts/b9539214.html"/>
      <url>/posts/b9539214.html</url>
      
        <content type="html"><![CDATA[<div class="note danger modern"><p><strong>声明</strong></p><ul><li>本文仅供学习交流使用</li><li>切勿从事违法犯罪行为</li><li>遵纪守法，做优秀公民</li><li>否则后果自负</li></ul></div><h2 id="科学上网类别"><a href="#科学上网类别" class="headerlink" title="科学上网类别"></a>科学上网类别</h2><p>一般来讲有多种办法：最直接的就是“肉身出墙”，推荐游泳（www）；还有就是使用VPN或者机场节点订阅链接以及一些浏览器等等</p><ol><li>VPN（虚拟专用网络）：VPN是一种可用于隐藏您的IP地址并将互联网连接从您的设备转发到另一个服务器的加密隧道</li><li>机场节点（代理服务器）：允许通过第三方服务器访问互联网。许多代理服务器也被封锁，但仍有一些可供使用。但是，使用代理服务器时需要注意安全性问题，因为代理服务器可以窃取个人信息</li><li><a href="https://www.torproject.org">Tor浏览器</a>：Tor浏览器可以帮助匿名浏览互联网。这是通过将用户的互联网连接随机路由到全球各地的服务器上来实现的。Tor浏览器是免费的，但是由于它的匿名性和安全性，可能会比较慢</li></ol><details class="toggle" ><summary class="toggle-button" style="">VPN和机场节点区别</summary><div class="toggle-content"><p>VPN是一种通过加密和隧道技术将用户的网络连接从本地设备传输到另一台服务器上的安全连接方式。VPN可以帮助用户隐藏IP地址、保护隐私、绕过地理限制等。</p><p>机场节点（也称为SSR/V2Ray节点）则是一个代理服务器，用户可以通过这个服务器来访问被封锁的网站、加速网络连接、保护隐私等。机场节点的原理是通过中间人攻击，将用户的请求转发到代理服务器上，再将代理服务器返回的数据转发回用户。机场节点通常需要用户付费才能使用，用户可以从机场节点提供商处购买节点。</p><p>虽然VPN和机场节点都可以帮助用户访问被封锁的网站、保护隐私等，但它们的实现原理和功能有所不同。VPN主要是建立一条加密的通道，可以让用户通过互联网连接到其他地区的服务器，从而实现网络加密、绕过地理限制等功能。而机场节点则是提供代理服务的服务器，用户可以通过代理服务器访问被封锁的网站、加速网络连接等。</p></div></details><div class="note info simple"><p>以下内容均非广告</p></div><h2 id="VPN服务"><a href="#VPN服务" class="headerlink" title="VPN服务"></a>VPN服务</h2><ol><li><a href="https://www.expressvpn.com/home">ExpressVPN</a>：总部位于英属维京群岛的VPN服务提供商，已经成为业内的知名品牌。他们提供了可靠的加密和快速的连接速度，同时在安全性和隐私保护方面做得非常好。应该是最知名的了。</li><li><a href="https://nordvpn.com/zh/">NordVPN</a>：总部位于巴拿马的VPN服务提供商，也是一家知名品牌。他们提供了高水平的加密和安全功能，同时也具有许多其他功能，如双重VPN、Onion over VPN等。</li><li><a href="https://strongvpn.com">StrongVPN</a>：成立于1995年的VPN服务提供商，总部位于美国。他们提供了全球高品质的VPN服务，并在业内树立了良好的口碑和声誉。它支持多种设备、无线带宽、具有全球服务器。</li><li><a href="https://surfshark.com/zh/">Surfshark</a>：这新兴的VPN服务提供商，总部位于英属维京群岛。他们提供了许多优秀的功能，如不限设备数、无限制的带宽、全球服务器分布等。</li><li><a href="https://www.purevpn.com">PureVPN</a>：总部位于香港的VPN服务提供商，他们提供了超过2000个服务器、256位加密、防火墙保护、无限带宽等功能。他们的服务价格合理，同时提供了全球24/7的客户支持。</li></ol><h2 id="机场订阅"><a href="#机场订阅" class="headerlink" title="机场订阅"></a>机场订阅</h2><ol><li><p>最萌の云</p><ul><li>有体验套餐，在使用之前可以自己先试试</li><li>不同的套餐会有额外不同的特权，比如共享apple ID和Netflix账号等</li><li>节点比较多，官网有各种平台使用教程</li><li>他们自己还搞了chatgpt体验网站，可以用下试试玩<br>推荐指数：⭐⭐⭐ <a href="https://www.cutecloud.net/auth/register?code=lnPy">点我进入官网</a></li></ul></li><li><p>ViRay(Beta)</p><ul><li>提供体验套餐，节点数量和质量还行</li><li>支持两种收费模式：按月收费和按量收费（我觉得很好）</li><li>虽然好像是香港的，但是支付依然方便<br>推荐指数：⭐⭐⭐ <a href="https://www.viraywinter.com/airfield/price">点我进入官网</a><br>邀请码：<span class="hide-inline"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">不要点我  </button><span class="hide-content">NPQA2I</span></span></li></ul></li><li><p>青森云</p><ul><li>和 最萌の云 差不多，UI都相似</li><li>套餐稍有不同，共享账号内容没有最萌の云多</li><li>可以体验<br>推荐指数：⭐⭐ <a href="https://cccc.gg/auth/register?code=u3rV">点我进入官网</a></li></ul></li><li><details>  <summary>需要密码才能查看的内容</summary>  <div id="password-protected-content" style="display: none;">    <p>感谢无私的PKU兄弟，<a target="_blank" href="https://pkuhistory.fandom.com/zh/wiki/WallessPKU">点我试试</a></p>    <p>推荐指数：⭐⭐⭐</p>  </div>  <div id="password-input-form">    <label for="password">提示：我们和隔壁(low alphabets)：</label>    <input type="password" id="password" name="password">    <button type="button" onclick="checkPassword()">提交</button>  </div></details></li></ol><script>function checkPassword() {  var password = document.getElementById("password").value;  if (password == "thupku") {    document.getElementById("password-input-form").style.display = "none";    document.getElementById("password-protected-content").style.display = "block";    document.querySelector("details").setAttribute("open", "open");  } else {    alert("密码不正确，请重新输入。");  }}</script>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vpn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始建立一个Blog网站</title>
      <link href="/posts/5d58106c.html"/>
      <url>/posts/5d58106c.html</url>
      
        <content type="html"><![CDATA[<div class="note primary modern"><p>首先请自行注册Github账号，<a href="https://github.com/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F&amp;source=header-home">点这里</a></p></div><details class="toggle" ><summary class="toggle-button" style="">参考资料</summary><div class="toggle-content"><ol><li><a href="https://zhuanlan.zhihu.com/p/102592286">从零开始搭建个人博客（超详细）—— 枫叶</a>，该答主写得非常详细，跟着走完全程应该没什么问题，可能有些步骤由于版本更替和个人配置会稍有差异</li><li><a href="https://butterfly.js.org/">butterfly官方指北</a>，安装好之后的一些关于该主题的配置，介绍比较全面，可以配合<a href="https://space.bilibili.com/13282871/channel/collectiondetail?sid=86028">Hexo初阶入门教程萌新必备手摸手教学</a>食用更佳</li><li>评论系统为Vercel上部署的Twikoo，可参阅<a href="https://twikoo.js.org/quick-start.html#%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%83%A8%E7%BD%B2">Twikoo指南</a></li><li>经过以上步骤基本可以建好一个初步的博客网站了，进一步个性化配置主题，可以多搜索参考大佬们的</li></ol></div></details><div class="note info flat"><p>申请好github账号之后可以按照下面的步骤进行操作，出现问题可以将错误信息复制粘贴到搜索引擎进行搜索，一般都能找到解决方法</p></div><h2 id="Git下载安装"><a href="#Git下载安装" class="headerlink" title="Git下载安装"></a>Git下载安装</h2><details class="toggle" ><summary class="toggle-button" style="">Git下载安装</summary><div class="toggle-content"><ul><li><a href="https://git-scm.com/downloads">git下载地址</a>，根据自己的系统进行下载。我这里选择下载windows 64bit版本的installer。</li></ul><p><img src="https://img-bed-agc.pages.dev/2023/hexo/git1.png" alt="git下载界面"></p><ul><li>安装目录选择</li></ul><p><img src="https://img-bed-agc.pages.dev/2023/hexo/git2.png" alt="git目录"></p><ul><li>以下几个步骤可根据自身情况配置（使用默认设置也可）</li></ul><p><img src="https://img-bed-agc.pages.dev/2023/hexo/git3.png" alt="git3"></p><p><img src="https://img-bed-agc.pages.dev/2023/hexo/git4.png" alt="git4"></p><p><img src="https://img-bed-agc.pages.dev/2023/hexo/git5.png" alt="git5"></p><p><img src="https://img-bed-agc.pages.dev/2023/hexo/git6.png" alt="git6"></p><p><img src="https://img-bed-agc.pages.dev/2023/hexo/git7.png" alt="git7"></p><p><img src="https://img-bed-agc.pages.dev/2023/hexo/git8.png" alt="git8"></p><p><img src="https://img-bed-agc.pages.dev/2023/hexo/git9.png" alt="git9"></p><p><img src="https://img-bed-agc.pages.dev/2023/hexo/git10.png" alt="git10"></p><p><img src="https://img-bed-agc.pages.dev/2023/hexo/git11.png" alt="git11"></p><p><img src="https://img-bed-agc.pages.dev/2023/hexo/git12.png" alt="git12"></p><p><img src="https://img-bed-agc.pages.dev/2023/hexo/git13.png" alt="git13"></p><p><img src="https://img-bed-agc.pages.dev/2023/hexo/git14.png" alt="git14"></p><p><img src="https://img-bed-agc.pages.dev/2023/hexo/git15.png" alt="git15"></p><p><img src="https://img-bed-agc.pages.dev/2023/hexo/git16.png" alt="git16"></p><p><img src="https://img-bed-agc.pages.dev/2023/hexo/git17.png" alt="git17"></p><p>安装完成，在桌面右键，可以看到出现了<code>git bush</code>选项，点击后就可以使用git了！</p><p><img src="https://img-bed-agc.pages.dev/2023/hexo/git18.png" alt="git18"></p><p><img src="https://img-bed-agc.pages.dev/2023/hexo/git19.png" alt="git19"></p></div></details><h2 id="Git与Github连接"><a href="#Git与Github连接" class="headerlink" title="Git与Github连接"></a>Git与Github连接</h2><p>使用ssh协议连接github，进行本地提交修改仓库文件。</p><ul><li>SSH协议是一种在不安全网络上用于安全远程登录和其他安全网络服务的协议，由三个层次组成：传输层协议、用户认证协议和连接协议。SSH协议可以防止中间人攻击，即攻击者冒充服务器或客户端进行数据截获或篡改的攻击。SSH协议通过使用公钥私钥对进行身份验证，以及使用会话标识符来标识SSH连接来实现安全性。由于SSH提供了更高的安全性和可靠性，它已经成为了远程管理和操作的首选方式，被广泛应用于Linux、Unix、macOS和Windows等操作系统中。</li></ul><h3 id="绑定Github"><a href="#绑定Github" class="headerlink" title="绑定Github"></a>绑定Github</h3><details class="toggle" ><summary class="toggle-button" style="">绑定Github</summary><div class="toggle-content"><p>用git上传文件到GitHub首先得利用SSH登录远程主机，而登录方式有两种：一种是口令登录；另一种是公钥登录。口令登录每次都要输入密码十分麻烦，所以我们一般会选择公钥授权。在上一步安装过程中，我们选择安装了Git自带的OpenSSH，可以打开GitBush进行以下操作。</p><blockquote><p>复制命令：<code>Ctrl+Insert</code></p><p>粘贴命令：<code>Shift+Insert</code></p></blockquote><ul><li>输入<code>ssh</code>回车后进行查看，出现下面提示，则证明已安装成功，可以直接使用</li></ul><p><img src="https://img-bed-agc.pages.dev/2023/hexo/link1.png" alt="link1"></p><ul><li>命令<code>ssh-keygen -t rsa</code>，之后点4次回车，生成密钥</li></ul><blockquote><p>默认生成文件地址</p><p>windows：<code>/c/Users/你的用户名/.ssh/</code></p><p>mac和linux：<code>~/.ssh</code></p></blockquote><p><img src="https://img-bed-agc.pages.dev/2023/hexo/link2.png" alt="link2"></p><ul><li>找到公钥文件<code>id_rsa.pub</code>，以文本形式打开，复制所有内容到剪贴板</li></ul><p><img src="https://img-bed-agc.pages.dev/2023/hexo/link3.png" alt="link3"></p><ul><li>点击GitHub主页，进入settings界面</li></ul><p><img src="https://img-bed-agc.pages.dev/2023/hexo/link4.png" alt="link4"></p><ul><li>进入界面后，选择SSH and GPG keys，再点击New SSH key</li></ul><p><img src="https://img-bed-agc.pages.dev/2023/hexo/link5.png" alt="link5"></p><ul><li>把复制的公钥文件<code>id_rsa.pub</code>内容，粘贴到key框里，(Title部分非必填)，再点击Add SSH key</li></ul><p><img src="https://img-bed-agc.pages.dev/2023/hexo/link6.png" alt="link6"></p><ul><li>验证连接，输入<code>ssh -T git@github.com</code></li></ul><blockquote><p>第一次连接会进行一次确认，填yes即可</p></blockquote><p><img src="https://img-bed-agc.pages.dev/2023/hexo/link7.png" alt="link7"></p><p>至此我们就完成了本地Git和Github的连接设定，下面我们将进行本地修改仓库文件，如何对Github仓库提交文件，同步更新</p></div></details><h3 id="向Github提交文件"><a href="#向Github提交文件" class="headerlink" title="向Github提交文件"></a>向Github提交文件</h3><details class="toggle" ><summary class="toggle-button" style="">Git提交文件</summary><div class="toggle-content"><p>本地没有仓库时，同步远程Github仓库到本地，修改变更再提交给Github，可按照一下步骤进行操作。若本地已有一个Git仓库，想提交到Github远程仓库时，只需进入该本地仓库，输入命令<code>git remote add origin git@github.com:viesuki/test.git</code>就能完成连接，之后的操作下同。</p><blockquote><p>下面我新建一个Github仓库，一次为例进行演示</p></blockquote><ul><li>到github主页点击Respositories，点击New新建仓库<code>test</code></li></ul><p><img src="https://img-bed-agc.pages.dev/2023/hexo/link8.png" alt="link8"></p><ul><li>点击添加仓库后便得到了一个仓库</li></ul><p><img src="https://img-bed-agc.pages.dev/2023/hexo/link9.png" alt="link9"></p><p><img src="https://img-bed-agc.pages.dev/2023/hexo/link10.png" alt="lin10"></p><ul><li>点击右上角<code>code</code>，copy仓库SSH地址（HTTPS不太稳定）</li></ul><p><img src="https://img-bed-agc.pages.dev/2023/hexo/link11.png" alt="link11"></p><ul><li>进入想要克隆到本地的项目文件夹，输入：<code>git clone git@github.com:viesuki/test.git</code></li></ul><p><img src="https://img-bed-agc.pages.dev/2023/hexo/link12.png" alt="link12"></p><ul><li>然后就可以在本地文件夹里看到克隆的仓库test了，其中<code>.git</code>文件夹是隐藏文件，需要打开文件管理器显示隐藏文件功能才能看到</li></ul><p><img src="https://img-bed-agc.pages.dev/2023/hexo/link13.png" alt="link13"></p><ul><li>下面对本地仓库进行修改，我们在本地仓库新增一个文件<code>test.txt</code></li></ul><p><img src="https://img-bed-agc.pages.dev/2023/hexo/link14.png" alt="link14"></p><ul><li>Git Bush使用<code>cd</code>命令进入本地test仓库，输入<code>git status</code>查看仓库状态</li></ul><blockquote><p>可以看到新增的文件需要被提交，是红色状态</p></blockquote><p><img src="https://img-bed-agc.pages.dev/2023/hexo/link15.png" alt="link15"></p><ul><li>使用命令<code>git add .</code>将文件变更先添加到<strong>临时文件缓冲区</strong></li></ul><blockquote><p>此时新文件已被提交到临时缓冲区，变为绿色状态</p></blockquote><p><img src="https://img-bed-agc.pages.dev/2023/hexo/link16.png" alt="link16"></p><ul><li>使用命令<code>git commit -m &quot;提交信息&quot;</code>，将更改提交到本<strong>地仓库</strong></li></ul><blockquote><p>第一次提交会弹出以下提示</p></blockquote><p><img src="https://img-bed-agc.pages.dev/2023/hexo/link17.png" alt="link17"></p><blockquote><p>运行红框内的两行命令，把双引号内的信息改成注册Github的邮箱和用户名，再次提交到本地仓库，显示如下信息，则表示成功</p></blockquote><p><img src="https://img-bed-agc.pages.dev/2023/hexo/link18.png" alt="link18"></p><ul><li>使用命令<code>git push origin main</code>，将变更提交到远程Github仓库</li></ul><p><img src="https://img-bed-agc.pages.dev/2023/hexo/link19.png" alt="link19"></p><blockquote><p>最后刷新一下Github的test仓库，会发现test.txt文件已成功被提交！</p></blockquote><p><img src="https://img-bed-agc.pages.dev/2023/hexo/link20.png" alt="link20"></p></div></details><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><details class="toggle" ><summary class="toggle-button" style="">安装node</summary><div class="toggle-content"><p><a href="https://nodejs.org/zh-cn/download">下载地址</a>，可自行下载对应平台即可，安装时自行选择安装位置，本次选择安装在D盘，其他选项默认。</p><ul><li>安装完成后在windows命令行输入<code>node -v</code>、<code>npm -v</code>查看版本信息，检查安装是否正常</li></ul><p><img src="https://img-bed-agc.pages.dev/2023/hexo/node1.png" alt="node1"></p></div></details><details class="toggle" ><summary class="toggle-button" style="">设置npm环境变量</summary><div class="toggle-content"><blockquote><p>如果不设置的话，安装模块的时候就会把模块装到C盘，占用C盘的空间</p></blockquote><ul><li>在上一步安装后的 nodejs 文件夹中新建两个空文件夹 node_cache、node_global</li></ul><p><img src="https://img-bed-agc.pages.dev/2023/hexo/node2.png" alt="node2"></p><ul><li>在windows命令行输入以下命令（记得换成自己nodejs路径）</li></ul><blockquote><p>npm config set prefix “D:\normalexe\nodejs\node_global”</p><p>npm config set cache “D:\normalexe\nodejs\node_cache”</p></blockquote><p><img src="https://img-bed-agc.pages.dev/2023/hexo/node3.png" alt="node3"></p><ul><li>打开控制面板，搜索”环境变量”，点击编辑系统环境变量，新建下列系统变量</li></ul><blockquote><p>变量：NODE_PATH</p><p>值：D:\normalexe\nodejs\node_global\node_modules</p></blockquote><p><img src="https://img-bed-agc.pages.dev/2023/hexo/node4.png" alt="node4"></p><p><img src="https://img-bed-agc.pages.dev/2023/hexo/node5.png" alt="node5"></p><ul><li>编辑Path，将npm路径改为 D:\normalexe\nodejs\node_global （注意填自己对应的路径）</li></ul><p><img src="https://img-bed-agc.pages.dev/2023/hexo/node6.png" alt="node6"></p><p><img src="https://img-bed-agc.pages.dev/2023/hexo/node7.png" alt="node7"></p><p>最后都点击确定，退出该界面。</p><ul><li>测试是否成功，在windows命令行输命令<code>npm install webpack -g</code>。然后你会发现你失败了，并且出现了以下错误</li></ul><p><img src="https://img-bed-agc.pages.dev/2023/hexo/node8.png" alt="node8"></p><blockquote><p>因为用户没有 nodejs 文件的修改权限，解决办法有两个</p><ol><li>以管理员身份运行上一条命令（并非一劳永逸，以后非管理员使用 npm 命令还是会报错）</li><li>更改nodejs文件夹权限，右键属性–&gt;安全–&gt;编辑–&gt;勾选允许 <strong>修改</strong>–&gt;应用–&gt;应用</li></ol></blockquote><p>再次运行上一条命令，成功！再看看webpack的安装位置，正确！一般情况下 npm 不是最新版本，大家可自行更新，更新的 npm 文件也会出现在设定位置。</p><p><img src="https://img-bed-agc.pages.dev/2023/hexo/node9.png" alt="node9"></p><p><img src="https://img-bed-agc.pages.dev/2023/hexo/node10.png" alt="node10"></p></div></details><h2 id="创建个人Blog网站"><a href="#创建个人Blog网站" class="headerlink" title="创建个人Blog网站"></a>创建个人Blog网站</h2><h3 id="本地Hexo站点"><a href="#本地Hexo站点" class="headerlink" title="本地Hexo站点"></a>本地Hexo站点</h3><blockquote><p>这是<a href="https://hexo.io/zh-cn/docs/">中文官方教程</a></p></blockquote><details class="toggle" ><summary class="toggle-button" style="">本地hexo建站</summary><div class="toggle-content"><p>建立一个空白文件夹 <code>/myblog</code> ，右键进入Git Bash</p><ul><li>安装Hexo：<code>npm install -g hexo-cli</code></li></ul><p><img src="https://img-bed-agc.pages.dev/2023/hexo/node11.png" alt="node11"></p><ul><li>初始化：<code>hexo init</code></li></ul><p><img src="https://img-bed-agc.pages.dev/2023/hexo/node12.png" alt="node12"></p><ul><li>部署生成：<code>hexo g</code></li></ul><p><img src="https://img-bed-agc.pages.dev/2023/hexo/node13.png" alt="node13"></p><ul><li>本地查看：<code>hexo s</code></li></ul><p><img src="https://img-bed-agc.pages.dev/2023/hexo/node14.png" alt="node14"></p><ul><li>按住 Ctrl ，点击生成的链接 <a href="http://localhost:4000，浏览器就会打开你的网站">http://localhost:4000，浏览器就会打开你的网站</a></li></ul></div></details><h3 id="部署到Github上"><a href="#部署到Github上" class="headerlink" title="部署到Github上"></a>部署到Github上</h3><details class="toggle" ><summary class="toggle-button" style="">部署到Github</summary><div class="toggle-content"><p>打开上一步 /myblog 文件夹中生成的  _config.yml 文件</p><p><img src="https://img-bed-agc.pages.dev/2023/hexo/node16.png" alt="node16"></p><ul><li>找到最后一段，将 deploy 那段改成如下形式</li></ul><p><img src="https://img-bed-agc.pages.dev/2023/hexo/node17.png" alt="node17"></p><p>我这里以Github上一个名为 viesuki.github.io 空白仓库为例，将本地hexo网站部署到Github Pages上</p><blockquote><p>username.github.io 是一个特殊的仓库名称，网页部署成功后的域名也是这个。建议不太清楚Github Pages的同学，请直接用此仓库名称作为部署仓库，避免出问题。</p></blockquote><p><img src="https://img-bed-agc.pages.dev/2023/hexo/node18.png" alt="node18"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">repo: https://github.com/viesuki/viesuki.github.io.git</span><br><span class="line">branch: main</span><br></pre></td></tr></table></figure><ul><li>安装Git部署插件：<code>npm install hexo-deployer-git --save</code></li></ul><p><img src="https://img-bed-agc.pages.dev/2023/hexo/node19.png" alt="node19"></p><ul><li>部署：分别运行以下命令 <code>hexo cl</code> 、<code>hexo d</code></li></ul><blockquote><p>第一次会让你进行一次Github登录验证，自行验证就好</p></blockquote><p><img src="https://img-bed-agc.pages.dev/2023/hexo/node20.png" alt="node20"></p><ul><li>完成标志</li></ul><p><img src="https://img-bed-agc.pages.dev/2023/hexo/node21.png" alt="node21"></p><ul><li>在Github上发布</li></ul><p><img src="https://img-bed-agc.pages.dev/2023/hexo/node22.png" alt="node22"></p><blockquote><p>按照上图选择后，点击 Save，等待Github部署，大概需要两三分钟，可以不时刷新界面看看是否出现下图</p></blockquote><p><img src="https://img-bed-agc.pages.dev/2023/hexo/node23.png" alt="node23"></p><ul><li>点击 Visit site 欢迎来到你的网站！！！</li></ul><p><img src="https://img-bed-agc.pages.dev/2023/hexo/node15.png" alt="node24"></p><p>现在你可以分享给别人你的网站了~</p></div></details><h2 id="网站个性化"><a href="#网站个性化" class="headerlink" title="网站个性化"></a>网站个性化</h2><p>经过以上几个步骤，你已经初步掌握了如何将本地编写的网站代码通过Git工具发布到Github上，并进行部署。下面进行网站个性化设计和内容编写</p><ul><li><p>Hexo提供了很多优质的主题，详情可阅<a href="https://hexo.io/themes/">Hexo主题</a>，选择一个作为模板，查看对应官方指南进行设置</p></li><li><p>本站采用了 Butterfly 主题，作者制作了详细的教程，本文不再赘述，跟着<a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly官方指南</a>一步步来就可以了</p></li></ul><h2 id="评论区部署"><a href="#评论区部署" class="headerlink" title="评论区部署"></a>评论区部署</h2><hr>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python网络爬虫</title>
      <link href="/posts/2dfc8286.html"/>
      <url>/posts/2dfc8286.html</url>
      
        <content type="html"><![CDATA[<!-- # Python网络爬虫 --><p>现在有关爬虫的相关知识，网络上挺多的。完全没有相关知识的同学可以去看<a href="https://www.bilibili.com/video/BV1qs411n79v?p=1">Python网络爬虫与信息提取</a>网课，北理老师讲的，比较详细。本文也是参照此视频形成，代码案例目前为止有效，可以模仿学习。</p><h2 id="什么是网络爬虫">什么是网络爬虫</h2><blockquote><p>这里主要是个人简单应用，目前大型乃至多样化的爬虫有很多，技术也比较成熟，不做考虑。</p></blockquote><ul><li><p>网络爬虫用于定向网络数据爬取，进行网络分析。</p></li><li><p>可以用来<strong>批量下载</strong>资源，音视频、文字、数据等。</p></li><li><p>举个例子。</p><blockquote><p>比如你想要获得一支股票的涨跌情况，在网络上你只需要找到对应的股票详情页面即可。那么当你想批量获得众多股票的情况，你可以选择一个个找到对应详情（感觉还可以应对）。但是当你想这些股票做对比，或者来分析以便决策，是不是感觉要头大了。</p></blockquote><p>那么利用爬虫就可以在短时间里快速请求访问想要获取的网站数据，并返回结果。尤其当你需要的数据量庞大、访问需求高的时候，爬虫是个一劳永逸的手段（只要源数据网站界面组织架构不变，一般不会有很大修改）。</p></li></ul><h2 id="网络资源请求">网络资源请求</h2><h3 id="HTML语言">HTML语言</h3><p>网页文件通常.html(超文本标记语言) .xml(可扩展标记语言)等结尾，就像其他文件格式一样，这只是文件的一种组织方式，浏览器可解析并打开网页文件。随便打开一个网页，按F12即可看到网页源代码。爬虫所要做得事情简单来说就是访问网页，请求这个网页的源代码，然后通过一些手段搜索并整理出自己所要的数据。</p><p>下面是一个简单的网页代码（可自行复制后形成后缀为html的文档，用浏览器打开试试）。有关html详细知识可以点<a href="https://www.runoob.com/html/html-tutorial.html">这里</a>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是1号标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落是这样的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>[!TIP]<br>可以和熟悉的word文档进行类比，只不过html文本的格式通过这样<code>&lt;title&gt;&lt;/title&gt;</code>的标签来定义，而后由浏览器进行解析。word中格式所见即所得罢了</p></blockquote><h3 id="网络与用户请求">网络与用户请求</h3><ul><li><p>HTTP协议：Hypertext Transfer Protocol 超文本传输协议。是一种基于“请求与相应”模式、无状态的应用层协议（工作在THP协议之上），用于实现正常网络通信。由于安全性问题，目前网站普遍采用HTTPS协议，用于加密浏览器和服务器之间的通讯。</p></li><li><p>URL：Uniform Resource Location 统一资源定位符。就是我们俗称的网址，可以类比电脑本地存储资源的路径，在本地如果想访问某一文件，只要找到对应路径即可。在网络上的资源也是如此，通过URL实现精准请求。</p></li><li><p>HTTP协议对资源的操作</p><ul><li><strong>GET</strong>：请求URL对应资源</li><li><strong>HEAD</strong>：获取URL对应资源的头部信息</li><li>POST：附加新的数据</li><li>PUT：提交覆盖URL原有资源</li><li>PATCH：更改部分资源</li><li>DELETE：请求删除URL对应资源</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant 用户</span><br><span class="line">    participant 互联网</span><br><span class="line">    互联网-&gt;&gt; 用户: GET、HEAD方法</span><br><span class="line">    用户--&gt;&gt; 互联网: PUT、POST、PATCH、DELETE方法</span><br><span class="line">    Note over 用户,互联网: 通过URL</span><br></pre></td></tr></table></figure><h2 id="requests库">requests库</h2><p><a href="http://www.python-requests.org">Requests</a>是非常强大的第三方库，满足HTTP协议对网络资源的请求操作。</p><h3 id="请求方法">请求方法</h3><ul><li><p><strong>request方法</strong>：是requests库的最基本请求方法，另外7种（包括HTTP协议支持的6种 + OPTIONS方法）均是通过调用request方法来实现。</p></li><li><p><code>requests.request(method, url, **kwargs)</code></p><ul><li>method为上述7种方法</li><li>url为对应资源链接</li><li>**kwargs：控制访问参数，一共有13个，较为常用的几个是params、data、json、<strong>headers</strong>、<strong>cookies</strong>、auth、<strong>timeout</strong>等</li></ul></li><li><p><code>requests.get(url, params, **kwargs)</code>是最常用的方法。</p><blockquote><p>[!NOTE]<br>服务器严格管控修改数据库内容的操作，PUT、POST、PATCH、DELETE方法基本不会用到，最常用的就是GET方法，其次HEAD方法。</p></blockquote></li><li><p>另外6种方法略</p></li></ul><h3 id="调用requests库">调用requests库</h3><ul><li><p><strong>r = requests.get(url)</strong></p><ul><li>r: 返回的Response对象</li><li>requests：构建向服务器请求资源的Request对象</li></ul></li><li><p>Response对象的五大属性</p><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">r.status_code</td><td style="text-align:left">返回请求状态码，200为成功，404失败，（或其他数字）</td></tr><tr><td style="text-align:left">r.text</td><td style="text-align:left">url对应页面内容，字符串形式</td></tr><tr><td style="text-align:left">r.encoding</td><td style="text-align:left">从HTTP header中猜测的内容编码方式</td></tr><tr><td style="text-align:left">r.apparent_encoding</td><td style="text-align:left">从相应内容分析出的编码方式</td></tr><tr><td style="text-align:left">r.content</td><td style="text-align:left">相应内容的二进制形式（还原图片格式）</td></tr></tbody></table></li></ul><h3 id="Requests异常">Requests异常</h3><p>网络连接有风险，异常处理很重要。</p><table><thead><tr><th style="text-align:left">异常类型</th><th style="text-align:left">详情</th></tr></thead><tbody><tr><td style="text-align:left">requests.ConnectionError</td><td style="text-align:left">网络连接异常，DNS查询失败，拒绝连接</td></tr><tr><td style="text-align:left">requests.HTTPError</td><td style="text-align:left">HTTP错误</td></tr><tr><td style="text-align:left">requests.URLRequired</td><td style="text-align:left">URL缺失</td></tr><tr><td style="text-align:left">requests.TooManyRedirects</td><td style="text-align:left">超过最大重定向次数</td></tr><tr><td style="text-align:left">requests.ConnectTimeout</td><td style="text-align:left">连接远程服务器超时</td></tr><tr><td style="text-align:left">requests.Timeout</td><td style="text-align:left">请求URL超时异常</td></tr></tbody></table><ul><li>r.raise_for_status() 如果返回状态码不是200，引发一个HTTPError</li></ul><h2 id="Robots协议">Robots协议</h2><ul><li><p>滥用爬虫容易引发风险，比如<strong>骚扰</strong>、<strong>法律风险</strong>、<strong>隐私泄露</strong>等等。</p></li><li><p>当前限制网络爬虫的几个方法</p><ol><li>来源审查，判断用户代理User-Agent，通过检查HTTP协议头部信息实现</li><li>发布公告robots协议，告诉爬虫哪些内容可以抓取，哪些不行</li><li>其他反爬机制（比如需要cookies，锁定ip等）</li></ol></li><li><p>类人类行为可不参考Robots协议。可以在网站根目录’/'下加上’robots.txt’查看下协议，建议性协议而非约束性，可不遵守，但存在法律风险。</p></li></ul><h2 id="爬虫实践（requests库）">爬虫实践（requests库）</h2><h3 id="结构形式">结构形式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A[import第三方库] --&gt; B(requests请求获取网页)</span><br><span class="line">B --&gt; C&#123;r.text&#125;</span><br><span class="line">C --结构清晰较为复杂--&gt; D(Beautifulsoup格式化html编码)</span><br><span class="line">C -. 获取数据字段规律简单 .-&gt; E(正则表达式re进行字段匹配)</span><br><span class="line">D --&gt; F&#123;处理并输出结果&#125;</span><br><span class="line">E --&gt; F</span><br></pre></td></tr></table></figure><h3 id="代码实践">代码实践</h3><h4 id="获取中国大学排名">获取中国大学排名</h4><ul><li><p>数据来源：<a href="https://www.shanghairanking.cn/rankings/bcur/202111">2021中国最好大学排名</a></p></li><li><p>需求：获取并输出各个大学排名、名称、总评分三栏数据</p></li></ul><ol><li>引入requests、BeautifulSoup库</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br></pre></td></tr></table></figure><ol start="2"><li>定义请求网页函数get_html()</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_html</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        kv = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0&quot;</span>&#125;</span><br><span class="line">        r = requests.get(url, headers=kv, timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="comment"># print(r.request.headers[&#x27;User-Agent&#x27;])</span></span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>[!ATTENTION]</p><ul><li>头部信息headers的&quot;User-Agent&quot;改成了&quot;Mozilla/5.0&quot;，Mozilla浏览器种类，/5.0是版本，也可以模拟Chrome、safari等浏览器。如果不更改，request会用默认采用自己的代理，比如我不更改用户代理，再利用<code>r.request.headers</code>查看request请求的头部信息时，发现使用的是<code>'User-Agent': 'python-requests/2.24.0'</code>，这种会被某些网站拦截访问，所以建议模拟一个浏览器进行request请求。</li><li><code>r.encoding = r.apparent_encoding</code>根据内容解析编码，使r.text解析出正确内容。可以试试爬取百度首页，会发现r.encoding = ‘ISO-8859-1’（这种编码解析不了中文，而且如果网页header中没有charset属性，默认也是它）；r.apparent_encoding = ‘utf-8’。后者的值赋给前者后，r.text就能正常解析了。</li><li>try……except 结构用于处理异常。</li></ul></blockquote><ol start="3"><li>排除所需数据中的空格和换行字符</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_str</span>(<span class="params">string</span>):</span><br><span class="line">    re_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> string:</span><br><span class="line">        <span class="keyword">if</span> i != <span class="string">&#x27; &#x27;</span> <span class="keyword">and</span> i != <span class="string">&#x27;\n&#x27;</span>:</span><br><span class="line">            re_str += i</span><br><span class="line">    <span class="keyword">return</span> re_str</span><br></pre></td></tr></table></figure><ol start="4"><li>搜索筛选html中大学排名、名称、总分的数据</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fill_list</span>(<span class="params">ulist, html</span>):</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> soup.find(<span class="string">&#x27;tbody&#x27;</span>).children:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(tr, bs4.element.Tag):</span><br><span class="line">            tds = tr(<span class="string">&#x27;td&#x27;</span>)</span><br><span class="line">            rank = <span class="built_in">list</span>(tds[<span class="number">0</span>].strings)[<span class="number">0</span>]</span><br><span class="line">            grades = <span class="built_in">list</span>(tds[<span class="number">4</span>].strings)[<span class="number">0</span>]</span><br><span class="line">            Rank_list = get_str(rank)</span><br><span class="line">            Grades = get_str(grades)</span><br><span class="line">            ulist.append([Rank_list, tds[<span class="number">1</span>].a.string, Grades])</span><br></pre></td></tr></table></figure><blockquote><p>[!ATTENTION]</p><ul><li>BeautifulSoup(html, ‘html.parser’)使得r.text能够以html的格式读懂，形成树形结构，并产生BeautifulSoup、Tag等对象。Tag对象对应的就是html中的各类格式标签<code>&lt;p&gt;&lt;/p&gt;、&lt;td&gt;&lt;/td&gt;</code>这种。</li><li>这一步需要根据不同网站具体而定，在本例中，通过查看网站源代码，可以看到标签’tbody’下子标签’td’中保存着所需要的数据，找到并保存给自定变量，最后形成一个数据集。</li></ul></blockquote><ol start="5"><li>输出结果函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_list</span>(<span class="params">ulist, num</span>):</span><br><span class="line">    tplt = <span class="string">&#x27;&#123;:^4&#125;\t&#123;:^6&#125;\t&#123;:^0&#125;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;:^4&#125;\t&#123;:^6&#125;\t&#123;:^0&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Rank&#x27;</span>, <span class="string">&#x27;Grades&#x27;</span>, <span class="string">&#x27;Name&#x27;</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        u = ulist[i]</span><br><span class="line">        <span class="built_in">print</span>(tplt.<span class="built_in">format</span>(u[<span class="number">0</span>], u[<span class="number">2</span>], u[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><ol start="6"><li>主函数（调用以上函数实现）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    unifo = []</span><br><span class="line">    url = <span class="string">&#x27;https://www.shanghairanking.cn/rankings/bcur/202111&#x27;</span></span><br><span class="line">    html = get_html(url)</span><br><span class="line">    fill_list(unifo, html)</span><br><span class="line">    print_list(unifo, <span class="number">30</span>)</span><br></pre></td></tr></table></figure><ol start="7"><li>结果如下</li></ol><table><thead><tr><th style="text-align:left">Rank</th><th style="text-align:left">Grades</th><th style="text-align:left">Name</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">969.2</td><td style="text-align:left">清华大学</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">855.3</td><td style="text-align:left">北京大学</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">768.7</td><td style="text-align:left">浙江大学</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">723.4</td><td style="text-align:left">上海交通大学</td></tr><tr><td style="text-align:left">…</td><td style="text-align:left">…</td><td style="text-align:left">…</td></tr></tbody></table><h4 id="获取淘宝搜索“手机”后的商品">获取淘宝搜索“手机”后的商品</h4><ul><li><p>需求：价格和相应商品名称</p></li><li><p>不同点</p><ul><li>没有用BeautifulSoup，但是使用了正则表达式re库进行匹配搜索</li><li>除了设置用户代理，还得带上cookie（淘宝维护之后都需要cookie了）</li><li>其余都是常规手法</li></ul></li><li><p>查找cookie，并在代码相应位置更换。打开淘宝搜索网页，F12查看源码，按下图操作。</p><p><img src="pic/spider-1.png" alt="查看cookie"></p></li><li><p>爬虫源码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getHTMLText</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        header = &#123;</span><br><span class="line">                  <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;cookie&#x27;</span>: <span class="string">&#x27;.....&#x27;</span>&#125; <span class="comment"># cookie请更换为自己浏览器上的cookie字符串</span></span><br><span class="line"></span><br><span class="line">        r = requests.get(url, headers=header)</span><br><span class="line">        <span class="comment"># print(r.request.headers)</span></span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parsePage</span>(<span class="params">ilt, html</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plt = re.findall(<span class="string">r&#x27;\&quot;view_price\&quot;:\&quot;[\d+\.]*\&quot;&#x27;</span>, html)</span><br><span class="line">        tlt = re.findall(<span class="string">r&#x27;\&quot;raw_title\&quot;\:\&quot;.*?\&quot;&#x27;</span>, html)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plt)):</span><br><span class="line">            price = <span class="built_in">eval</span>(plt[i].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">            title = <span class="built_in">eval</span>(tlt[i].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">            ilt.append([price, title])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;F&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printGoodsList</span>(<span class="params">ilt</span>):</span><br><span class="line">    tplt = <span class="string">&quot;&#123;:4&#125;\t&#123;:8&#125;\t&#123;:16&#125;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(tplt.<span class="built_in">format</span>(<span class="string">&quot;序号&quot;</span>, <span class="string">&quot;价格&quot;</span>, <span class="string">&quot;商品名称&quot;</span>))</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> g <span class="keyword">in</span> ilt:</span><br><span class="line">        count = count + <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(tplt.<span class="built_in">format</span>(count, g[<span class="number">0</span>], g[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    goods = <span class="string">&#x27;手机&#x27;</span></span><br><span class="line">    depth = <span class="number">2</span></span><br><span class="line">    start_url = <span class="string">&quot;https://s.taobao.com/search?q=&quot;</span> + goods</span><br><span class="line">    infoList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(depth):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = start_url + <span class="string">&#x27;&amp;s=&#x27;</span> + <span class="built_in">str</span>(<span class="number">45</span> * i)</span><br><span class="line">            html = getHTMLText(url)</span><br><span class="line">            parsePage(infoList, html)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    printGoodsList(infoList)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="待续">待续~</h2><hr>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows安装虚拟Linux</title>
      <link href="/posts/a465fc49.html"/>
      <url>/posts/a465fc49.html</url>
      
        <content type="html"><![CDATA[<h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><ul><li><a href="https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html">VMware Workstation 17 Pro</a><ul><li><em>VMware-workstation-full-17.0.0-20800274.exe</em></li></ul></li><li><a href="https://ubuntu.com/download/desktop/thank-you?version=22.04.1&amp;architecture=amd64">Ubuntu Desktop 22.04</a><ul><li><em>ubuntu-22.04.1-desktop-amd64.iso</em></li></ul></li></ul><h2 id="安装VMware"><a href="#安装VMware" class="headerlink" title="安装VMware"></a>安装VMware</h2><p><img src="https://img-bed-agc.pages.dev/2023/vm_hyperv.png" alt="Hyper-V" style="zoom:70%;" /></p><p><img src="https://img-bed-agc.pages.dev/2023/vm_path.png" alt="vm_path" style="zoom:70%;" /></p><p><strong>License Keys</strong></p><ul><li><em>MC60H-DWHD5-H80U9-6V85M-8280D</em> (Available)</li><li><em>JU090-6039P-08409-8J0QH-2YR7F</em> (Maybe)</li><li><em>4Y09U-AJK97-089Z0-A3054-83KLA</em> (Maybe)</li></ul><p><strong>Restart</strong></p><p><img src="https://img-bed-agc.pages.dev/2023/vm_platform.png" alt="vm_platform" style="zoom:45%;" /></p><h2 id="安装ubuntu"><a href="#安装ubuntu" class="headerlink" title="安装ubuntu"></a>安装ubuntu</h2><p><img src="https://img-bed-agc.pages.dev/2023/new_custom.png" alt="new_custom" style="zoom:85%;" /></p><p><img src="https://img-bed-agc.pages.dev/2023/new_compatibility.png" alt="new_compatibility" style="zoom:85%;" /></p><p><img src="https://img-bed-agc.pages.dev/2023/new_os.png" alt="new_os" style="zoom:85%;" /></p><p><img src="https://img-bed-agc.pages.dev/2023/new_ubuntu.png" alt="new-ubuntu" style="zoom:85%;" /></p><p><img src="https://img-bed-agc.pages.dev/2023/new_filepath.png" alt="new_filepath" style="zoom:85%;" /></p><p><img src="https://img-bed-agc.pages.dev/2023/new_processor.png" alt="new_processor" style="zoom:85%;" /></p><blockquote><p>根据自己的电脑配置选择，我电脑是12核16个CPU</p></blockquote><ul><li>接下来中间4步选择默认推荐即可（此处跳过，到下面设置）</li></ul><p><img src="https://img-bed-agc.pages.dev/2023/new_disk.png" alt="new_disk" style="zoom:85%;" /></p><p><img src="https://img-bed-agc.pages.dev/2023/new_dcapacity.png" alt="new_dcapacity" style="zoom:85%;" /></p><blockquote><p>根据电脑磁盘大小分配合适内存，建议适当大一点 &gt;=40G。</p></blockquote><p><img src="https://img-bed-agc.pages.dev/2023/new_creating.png" alt="new_creating" style="zoom:85%;" /></p><p><img src="https://img-bed-agc.pages.dev/2023/new_hardware.png" alt="new_hardware" style="zoom:60%;" /></p><blockquote><p>选择步骤1下载的Ubuntu操作系统ISO文件，然后关闭点击 finish</p></blockquote><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><ul><li>创建Ubuntu虚拟机成功后启动，<strong>会黑屏一段时间，耐心等待。</strong></li></ul><blockquote><p>在此过程中如果出现各种报错，可以尝试关闭VM workstation重启虚拟机系统，如果还不能解决，建议删除第三步生成的虚拟机，重新生成。</p></blockquote><p><img src="https://img-bed-agc.pages.dev/2023/ubuntu_start.png" alt="ubuntu_start" style="zoom:71%;" /></p><p><img src="https://img-bed-agc.pages.dev/2023/ubuntu_set.png" alt="ubuntu_setting" style="zoom:26.6%;" /></p><p><img src="https://img-bed-agc.pages.dev/2023/ubuntu_chinese.png" alt="ubuntu_chinese" style="zoom:40%;" /></p><ul><li>剩余步骤默认，最后设置用户名和密码，确认后将自动安装系统。</li></ul><p><img src="https://img-bed-agc.pages.dev/2023/ubuntu_ing.png" alt="ubuntu_ing" style="zoom:66%;" /></p><ul><li>！最后就成功了！</li></ul><p><img src="https://img-bed-agc.pages.dev/2023/ubuntu_success.png" alt="ubuntu_success" style="zoom:48%;" /></p><h2 id="安装VMware-tools"><a href="#安装VMware-tools" class="headerlink" title="安装VMware tools"></a>安装VMware tools</h2><blockquote><p>实现主客机之间的复制粘贴功能</p></blockquote><p><img src="https://img-bed-agc.pages.dev/2023/vmtools_file2.png" alt="vmtools_file2" style="zoom:58%;" /></p><blockquote><p>Open in Terminal</p><p><code>sudo ./vmware-install.pl</code></p></blockquote><p><img src="https://img-bed-agc.pages.dev/2023/vmtools_sudo.png" alt="vmtools_sudo" style="zoom:56%;" /></p><p>​        详情可参阅：<a href="https://blog.csdn.net/davidhzq/article/details/101621482">Vmware虚拟机和主机之间复制粘贴</a></p><ul><li>安装完成后可以实现文件拖拽和ctrl+c、v，复制到Terminal中使用快捷键<code>ctrl+shift+v</code></li></ul><p>==FINAL==</p><p>点击<a href="../works/VirMachine_setup_intro.pdf">下载</a>，可得本篇pdf版文档</p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
