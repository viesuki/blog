<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python网络爬虫</title>
      <link href="/posts/2dfc8286.html"/>
      <url>/posts/2dfc8286.html</url>
      
        <content type="html"><![CDATA[<!-- # Python网络爬虫 --><p>现在有关爬虫的相关知识，网络上挺多的。完全没有相关知识的同学可以去看<a href="https://www.bilibili.com/video/BV1qs411n79v?p=1">Python网络爬虫与信息提取</a>网课，北理老师讲的，比较详细。本文也是参照此视频形成，代码案例目前为止有效，可以模仿学习。</p><h2 id="什么是网络爬虫">什么是网络爬虫</h2><blockquote><p>这里主要是个人简单应用，目前大型乃至多样化的爬虫有很多，技术也比较成熟，不做考虑。</p></blockquote><ul><li><p>网络爬虫用于定向网络数据爬取，进行网络分析。</p></li><li><p>可以用来<strong>批量下载</strong>资源，音视频、文字、数据等。</p></li><li><p>举个例子。</p><blockquote><p>比如你想要获得一支股票的涨跌情况，在网络上你只需要找到对应的股票详情页面即可。那么当你想批量获得众多股票的情况，你可以选择一个个找到对应详情（感觉还可以应对）。但是当你想这些股票做对比，或者来分析以便决策，是不是感觉要头大了。</p></blockquote><p>那么利用爬虫就可以在短时间里快速请求访问想要获取的网站数据，并返回结果。尤其当你需要的数据量庞大、访问需求高的时候，爬虫是个一劳永逸的手段（只要源数据网站界面组织架构不变，一般不会有很大修改）。</p></li></ul><h2 id="网络资源请求">网络资源请求</h2><h3 id="HTML语言">HTML语言</h3><p>网页文件通常.html(超文本标记语言) .xml(可扩展标记语言)等结尾，就像其他文件格式一样，这只是文件的一种组织方式，浏览器可解析并打开网页文件。随便打开一个网页，按F12即可看到网页源代码。爬虫所要做得事情简单来说就是访问网页，请求这个网页的源代码，然后通过一些手段搜索并整理出自己所要的数据。</p><p>下面是一个简单的网页代码（可自行复制后形成后缀为html的文档，用浏览器打开试试）。有关html详细知识可以点<a href="https://www.runoob.com/html/html-tutorial.html">这里</a>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是1号标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落是这样的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>[!TIP]<br>可以和熟悉的word文档进行类比，只不过html文本的格式通过这样<code>&lt;title&gt;&lt;/title&gt;</code>的标签来定义，而后由浏览器进行解析。word中格式所见即所得罢了</p></blockquote><h3 id="网络与用户请求">网络与用户请求</h3><ul><li><p>HTTP协议：Hypertext Transfer Protocol 超文本传输协议。是一种基于“请求与相应”模式、无状态的应用层协议（工作在THP协议之上），用于实现正常网络通信。由于安全性问题，目前网站普遍采用HTTPS协议，用于加密浏览器和服务器之间的通讯。</p></li><li><p>URL：Uniform Resource Location 统一资源定位符。就是我们俗称的网址，可以类比电脑本地存储资源的路径，在本地如果想访问某一文件，只要找到对应路径即可。在网络上的资源也是如此，通过URL实现精准请求。</p></li><li><p>HTTP协议对资源的操作</p><ul><li><strong>GET</strong>：请求URL对应资源</li><li><strong>HEAD</strong>：获取URL对应资源的头部信息</li><li>POST：附加新的数据</li><li>PUT：提交覆盖URL原有资源</li><li>PATCH：更改部分资源</li><li>DELETE：请求删除URL对应资源</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant 用户</span><br><span class="line">    participant 互联网</span><br><span class="line">    互联网-&gt;&gt; 用户: GET、HEAD方法</span><br><span class="line">    用户--&gt;&gt; 互联网: PUT、POST、PATCH、DELETE方法</span><br><span class="line">    Note over 用户,互联网: 通过URL</span><br></pre></td></tr></table></figure><h2 id="requests库">requests库</h2><p><a href="http://www.python-requests.org">Requests</a>是非常强大的第三方库，满足HTTP协议对网络资源的请求操作。</p><h3 id="请求方法">请求方法</h3><ul><li><p><strong>request方法</strong>：是requests库的最基本请求方法，另外7种（包括HTTP协议支持的6种 + OPTIONS方法）均是通过调用request方法来实现。</p></li><li><p><code>requests.request(method, url, **kwargs)</code></p><ul><li>method为上述7种方法</li><li>url为对应资源链接</li><li>**kwargs：控制访问参数，一共有13个，较为常用的几个是params、data、json、<strong>headers</strong>、<strong>cookies</strong>、auth、<strong>timeout</strong>等</li></ul></li><li><p><code>requests.get(url, params, **kwargs)</code>是最常用的方法。</p><blockquote><p>[!NOTE]<br>服务器严格管控修改数据库内容的操作，PUT、POST、PATCH、DELETE方法基本不会用到，最常用的就是GET方法，其次HEAD方法。</p></blockquote></li><li><p>另外6种方法略</p></li></ul><h3 id="调用requests库">调用requests库</h3><ul><li><p><strong>r = requests.get(url)</strong></p><ul><li>r: 返回的Response对象</li><li>requests：构建向服务器请求资源的Request对象</li></ul></li><li><p>Response对象的五大属性</p><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">r.status_code</td><td style="text-align:left">返回请求状态码，200为成功，404失败，（或其他数字）</td></tr><tr><td style="text-align:left">r.text</td><td style="text-align:left">url对应页面内容，字符串形式</td></tr><tr><td style="text-align:left">r.encoding</td><td style="text-align:left">从HTTP header中猜测的内容编码方式</td></tr><tr><td style="text-align:left">r.apparent_encoding</td><td style="text-align:left">从相应内容分析出的编码方式</td></tr><tr><td style="text-align:left">r.content</td><td style="text-align:left">相应内容的二进制形式（还原图片格式）</td></tr></tbody></table></li></ul><h3 id="Requests异常">Requests异常</h3><p>网络连接有风险，异常处理很重要。</p><table><thead><tr><th style="text-align:left">异常类型</th><th style="text-align:left">详情</th></tr></thead><tbody><tr><td style="text-align:left">requests.ConnectionError</td><td style="text-align:left">网络连接异常，DNS查询失败，拒绝连接</td></tr><tr><td style="text-align:left">requests.HTTPError</td><td style="text-align:left">HTTP错误</td></tr><tr><td style="text-align:left">requests.URLRequired</td><td style="text-align:left">URL缺失</td></tr><tr><td style="text-align:left">requests.TooManyRedirects</td><td style="text-align:left">超过最大重定向次数</td></tr><tr><td style="text-align:left">requests.ConnectTimeout</td><td style="text-align:left">连接远程服务器超时</td></tr><tr><td style="text-align:left">requests.Timeout</td><td style="text-align:left">请求URL超时异常</td></tr></tbody></table><ul><li>r.raise_for_status() 如果返回状态码不是200，引发一个HTTPError</li></ul><h2 id="Robots协议">Robots协议</h2><ul><li><p>滥用爬虫容易引发风险，比如<strong>骚扰</strong>、<strong>法律风险</strong>、<strong>隐私泄露</strong>等等。</p></li><li><p>当前限制网络爬虫的几个方法</p><ol><li>来源审查，判断用户代理User-Agent，通过检查HTTP协议头部信息实现</li><li>发布公告robots协议，告诉爬虫哪些内容可以抓取，哪些不行</li><li>其他反爬机制（比如需要cookies，锁定ip等）</li></ol></li><li><p>类人类行为可不参考Robots协议。可以在网站根目录’/'下加上’robots.txt’查看下协议，建议性协议而非约束性，可不遵守，但存在法律风险。</p></li></ul><h2 id="爬虫实践（requests库）">爬虫实践（requests库）</h2><h3 id="结构形式">结构形式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A[import第三方库] --&gt; B(requests请求获取网页)</span><br><span class="line">B --&gt; C&#123;r.text&#125;</span><br><span class="line">C --结构清晰较为复杂--&gt; D(Beautifulsoup格式化html编码)</span><br><span class="line">C -. 获取数据字段规律简单 .-&gt; E(正则表达式re进行字段匹配)</span><br><span class="line">D --&gt; F&#123;处理并输出结果&#125;</span><br><span class="line">E --&gt; F</span><br></pre></td></tr></table></figure><h3 id="代码实践">代码实践</h3><h4 id="获取中国大学排名">获取中国大学排名</h4><ul><li><p>数据来源：<a href="https://www.shanghairanking.cn/rankings/bcur/202111">2021中国最好大学排名</a></p></li><li><p>需求：获取并输出各个大学排名、名称、总评分三栏数据</p></li></ul><ol><li>引入requests、BeautifulSoup库</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br></pre></td></tr></table></figure><ol start="2"><li>定义请求网页函数get_html()</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_html</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        kv = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0&quot;</span>&#125;</span><br><span class="line">        r = requests.get(url, headers=kv, timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="comment"># print(r.request.headers[&#x27;User-Agent&#x27;])</span></span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>[!ATTENTION]</p><ul><li>头部信息headers的&quot;User-Agent&quot;改成了&quot;Mozilla/5.0&quot;，Mozilla浏览器种类，/5.0是版本，也可以模拟Chrome、safari等浏览器。如果不更改，request会用默认采用自己的代理，比如我不更改用户代理，再利用<code>r.request.headers</code>查看request请求的头部信息时，发现使用的是<code>'User-Agent': 'python-requests/2.24.0'</code>，这种会被某些网站拦截访问，所以建议模拟一个浏览器进行request请求。</li><li><code>r.encoding = r.apparent_encoding</code>根据内容解析编码，使r.text解析出正确内容。可以试试爬取百度首页，会发现r.encoding = ‘ISO-8859-1’（这种编码解析不了中文，而且如果网页header中没有charset属性，默认也是它）；r.apparent_encoding = ‘utf-8’。后者的值赋给前者后，r.text就能正常解析了。</li><li>try……except 结构用于处理异常。</li></ul></blockquote><ol start="3"><li>排除所需数据中的空格和换行字符</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_str</span>(<span class="params">string</span>):</span><br><span class="line">    re_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> string:</span><br><span class="line">        <span class="keyword">if</span> i != <span class="string">&#x27; &#x27;</span> <span class="keyword">and</span> i != <span class="string">&#x27;\n&#x27;</span>:</span><br><span class="line">            re_str += i</span><br><span class="line">    <span class="keyword">return</span> re_str</span><br></pre></td></tr></table></figure><ol start="4"><li>搜索筛选html中大学排名、名称、总分的数据</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fill_list</span>(<span class="params">ulist, html</span>):</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> soup.find(<span class="string">&#x27;tbody&#x27;</span>).children:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(tr, bs4.element.Tag):</span><br><span class="line">            tds = tr(<span class="string">&#x27;td&#x27;</span>)</span><br><span class="line">            rank = <span class="built_in">list</span>(tds[<span class="number">0</span>].strings)[<span class="number">0</span>]</span><br><span class="line">            grades = <span class="built_in">list</span>(tds[<span class="number">4</span>].strings)[<span class="number">0</span>]</span><br><span class="line">            Rank_list = get_str(rank)</span><br><span class="line">            Grades = get_str(grades)</span><br><span class="line">            ulist.append([Rank_list, tds[<span class="number">1</span>].a.string, Grades])</span><br></pre></td></tr></table></figure><blockquote><p>[!ATTENTION]</p><ul><li>BeautifulSoup(html, ‘html.parser’)使得r.text能够以html的格式读懂，形成树形结构，并产生BeautifulSoup、Tag等对象。Tag对象对应的就是html中的各类格式标签<code>&lt;p&gt;&lt;/p&gt;、&lt;td&gt;&lt;/td&gt;</code>这种。</li><li>这一步需要根据不同网站具体而定，在本例中，通过查看网站源代码，可以看到标签’tbody’下子标签’td’中保存着所需要的数据，找到并保存给自定变量，最后形成一个数据集。</li></ul></blockquote><ol start="5"><li>输出结果函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_list</span>(<span class="params">ulist, num</span>):</span><br><span class="line">    tplt = <span class="string">&#x27;&#123;:^4&#125;\t&#123;:^6&#125;\t&#123;:^0&#125;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;:^4&#125;\t&#123;:^6&#125;\t&#123;:^0&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Rank&#x27;</span>, <span class="string">&#x27;Grades&#x27;</span>, <span class="string">&#x27;Name&#x27;</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        u = ulist[i]</span><br><span class="line">        <span class="built_in">print</span>(tplt.<span class="built_in">format</span>(u[<span class="number">0</span>], u[<span class="number">2</span>], u[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><ol start="6"><li>主函数（调用以上函数实现）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    unifo = []</span><br><span class="line">    url = <span class="string">&#x27;https://www.shanghairanking.cn/rankings/bcur/202111&#x27;</span></span><br><span class="line">    html = get_html(url)</span><br><span class="line">    fill_list(unifo, html)</span><br><span class="line">    print_list(unifo, <span class="number">30</span>)</span><br></pre></td></tr></table></figure><ol start="7"><li>结果如下</li></ol><table><thead><tr><th style="text-align:left">Rank</th><th style="text-align:left">Grades</th><th style="text-align:left">Name</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">969.2</td><td style="text-align:left">清华大学</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">855.3</td><td style="text-align:left">北京大学</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">768.7</td><td style="text-align:left">浙江大学</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">723.4</td><td style="text-align:left">上海交通大学</td></tr><tr><td style="text-align:left">…</td><td style="text-align:left">…</td><td style="text-align:left">…</td></tr></tbody></table><h4 id="获取淘宝搜索“手机”后的商品">获取淘宝搜索“手机”后的商品</h4><ul><li><p>需求：价格和相应商品名称</p></li><li><p>不同点</p><ul><li>没有用BeautifulSoup，但是使用了正则表达式re库进行匹配搜索</li><li>除了设置用户代理，还得带上cookie（淘宝维护之后都需要cookie了）</li><li>其余都是常规手法</li></ul></li><li><p>查找cookie，并在代码相应位置更换。打开淘宝搜索网页，F12查看源码，按下图操作。</p><p><img src="pic/spider-1.png" alt="查看cookie"></p></li><li><p>爬虫源码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getHTMLText</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        header = &#123;</span><br><span class="line">                  <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;cookie&#x27;</span>: <span class="string">&#x27;.....&#x27;</span>&#125; <span class="comment"># cookie请更换为自己浏览器上的cookie字符串</span></span><br><span class="line"></span><br><span class="line">        r = requests.get(url, headers=header)</span><br><span class="line">        <span class="comment"># print(r.request.headers)</span></span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parsePage</span>(<span class="params">ilt, html</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plt = re.findall(<span class="string">r&#x27;\&quot;view_price\&quot;:\&quot;[\d+\.]*\&quot;&#x27;</span>, html)</span><br><span class="line">        tlt = re.findall(<span class="string">r&#x27;\&quot;raw_title\&quot;\:\&quot;.*?\&quot;&#x27;</span>, html)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plt)):</span><br><span class="line">            price = <span class="built_in">eval</span>(plt[i].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">            title = <span class="built_in">eval</span>(tlt[i].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">            ilt.append([price, title])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;F&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printGoodsList</span>(<span class="params">ilt</span>):</span><br><span class="line">    tplt = <span class="string">&quot;&#123;:4&#125;\t&#123;:8&#125;\t&#123;:16&#125;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(tplt.<span class="built_in">format</span>(<span class="string">&quot;序号&quot;</span>, <span class="string">&quot;价格&quot;</span>, <span class="string">&quot;商品名称&quot;</span>))</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> g <span class="keyword">in</span> ilt:</span><br><span class="line">        count = count + <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(tplt.<span class="built_in">format</span>(count, g[<span class="number">0</span>], g[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    goods = <span class="string">&#x27;手机&#x27;</span></span><br><span class="line">    depth = <span class="number">2</span></span><br><span class="line">    start_url = <span class="string">&quot;https://s.taobao.com/search?q=&quot;</span> + goods</span><br><span class="line">    infoList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(depth):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = start_url + <span class="string">&#x27;&amp;s=&#x27;</span> + <span class="built_in">str</span>(<span class="number">45</span> * i)</span><br><span class="line">            html = getHTMLText(url)</span><br><span class="line">            parsePage(infoList, html)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    printGoodsList(infoList)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="待续">待续~</h2><hr>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo快速建站</title>
      <link href="/posts/c24fdcc5.html"/>
      <url>/posts/c24fdcc5.html</url>
      
        <content type="html"><![CDATA[<div class="note primary flat"><p>以前使用过<a href="https://docsify.js.org/#/">docsify</a>做过一次网站，但最后不了了之了。本次以<a href="https://hexo.io/zh-cn/index.html">Hexo</a>框架为例，<a href="https://butterfly.js.org/">Butterfly</a>为模板建构了本网站，并利用github进行发布。建站过程中主要根据以下几个链接教程，基本能够从零开始，构建一个属于自己的Blog网站。</p></div><h1>开始行动</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/102592286">从零开始搭建个人博客（超详细）—— 枫叶</a>，该答主写得非常详细，跟着走完全程应该没什么问题，可能有些步骤由于版本更替和个人配置会稍有差异</li><li><a href="https://butterfly.js.org/">butterfly官方指北</a>，安装好之后的一些关于该主题的配置，介绍比较全面，可以配合<a href="https://space.bilibili.com/13282871/channel/collectiondetail?sid=86028">Hexo初阶入门教程萌新必备手摸手教学</a>食用更佳</li><li>评论系统为Vercel上部署的Twikoo，可参阅<a href="https://twikoo.js.org/quick-start.html#%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%83%A8%E7%BD%B2">Twikoo指南</a></li><li>经过以上步骤基本可以建好一个初步的博客网站了，进一步个性化配置主题，可以多搜索参考大佬们的</li></ol><h1>问题集锦</h1><blockquote><p>操作过程中有以下错误时，可以参考以解决</p></blockquote><ol><li><mark class="hl-label red">Failed to connect to github.com port 443</mark> ，连接不上github服务器<ul><li>尝试解决：<code>git config --global --unset https.proxy</code></li></ul></li><li><mark class="hl-label red">src refspec master does not match any</mark> ，找不到master分支<ul><li>将<code>git push origin master</code>改为<code>git push origin main</code><br>因为目前在github新建仓库，其主要分支名为<code>main</code>，也可以自行修改</li></ul></li></ol><h1>小技巧</h1><ol><li>在本地运行网站时，每次只有更改除了<code>.md</code>以外的<strong>设置类文件</strong>需要重新构建，即使用<code>hexo s</code>命令。推送到github上时，才需要<code>hexo cl</code>, <code>hexo g</code>, <code>hexo d</code>三连。</li><li>butterfly内置了很多款评论系统，我采用的是Twikoo评论系统，部署在Vercel上。但是由于vercel DNS解析收到污染，国内网访问不了，无法加载。可通过阿里云的域名解析到了国内，可参阅文章<a href="https://www.dadio.cc/posts/22919/">解决vercel部署的twikoo评论系统国内无法加载的情况</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows安装虚拟Linux</title>
      <link href="/posts/a465fc49.html"/>
      <url>/posts/a465fc49.html</url>
      
        <content type="html"><![CDATA[<h2 id="下载安装包">下载安装包</h2><ul><li><a href="https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html">VMware Workstation 17 Pro</a><ul><li><em>VMware-workstation-full-17.0.0-20800274.exe</em></li></ul></li><li><a href="https://ubuntu.com/download/desktop/thank-you?version=22.04.1&amp;architecture=amd64">Ubuntu Desktop 22.04</a><ul><li><em>ubuntu-22.04.1-desktop-amd64.iso</em></li></ul></li></ul><h2 id="安装VMware">安装VMware</h2><img src="/img/2023/vm_hyperv.png" alt="Hyper-V" style="zoom:70%;" /><img src="/img/2023/vm_path.png" alt="vm_path" style="zoom:70%;" /><p><strong>License Keys</strong></p><ul><li><em>MC60H-DWHD5-H80U9-6V85M-8280D</em> (Available)</li><li><em>JU090-6039P-08409-8J0QH-2YR7F</em> (Maybe)</li><li><em>4Y09U-AJK97-089Z0-A3054-83KLA</em> (Maybe)</li></ul><p><strong>Restart</strong></p><img src="/img/2023/vm_platform.png" alt="vm_platform" style="zoom:45%;" /><h2 id="安装ubuntu">安装ubuntu</h2><img src="/img/2023/new_custom.png" alt="new_custom" style="zoom:85%;" /><img src="/img/2023/new_compatibility.png" alt="new_compatibility" style="zoom:85%;" /><img src="/img/2023/new_os.png" alt="new_os" style="zoom:85%;" /><img src="/img/2023/new_ubuntu.png" alt="new-ubuntu" style="zoom:85%;" /><img src="/img/2023/new_filepath.png" alt="new_filepath" style="zoom:85%;" /><img src="/img/2023/new_processor.png" alt="new_processor" style="zoom:85%;" /><blockquote><p>根据自己的电脑配置选择，我电脑是12核16个CPU</p></blockquote><ul><li>接下来中间4步选择默认推荐即可（此处跳过，到下面设置）</li></ul><img src="/img/2023/new_disk.png" alt="new_disk" style="zoom:85%;" /><img src="/img/2023/new_dcapacity.png" alt="new_dcapacity" style="zoom:85%;" /><blockquote><p>根据电脑磁盘大小分配合适内存，建议适当大一点 &gt;=40G。</p></blockquote><img src="/img/2023/new_creating.png" alt="new_creating" style="zoom:85%;" /><img src="/img/2023/new_hardware.png" alt="new_hardware" style="zoom:60%;" /><blockquote><p>选择步骤1下载的Ubuntu操作系统ISO文件，然后关闭点击 finish</p></blockquote><h2 id="开始使用">开始使用</h2><ul><li>创建Ubuntu虚拟机成功后启动，<strong>会黑屏一段时间，耐心等待。</strong></li></ul><blockquote><p>在此过程中如果出现各种报错，可以尝试关闭VM workstation重启虚拟机系统，如果还不能解决，建议删除第三步生成的虚拟机，重新生成。</p></blockquote><img src="/img/2023/ubuntu_start.png" alt="ubuntu_start" style="zoom:71%;" /><img src="/img/2023/ubuntu_set.png" alt="ubuntu_setting" style="zoom:26.6%;" /><img src="/img/2023/ubuntu_chinese.png" alt="ubuntu_chinese" style="zoom:40%;" /><ul><li>剩余步骤默认，最后设置用户名和密码，确认后将自动安装系统。</li></ul><img src="/img/2023/ubuntu_ing.png" alt="ubuntu_ing" style="zoom:66%;" /><ul><li>！最后就成功了！</li></ul><img src="/img/2023/ubuntu_success.png" alt="ubuntu_success" style="zoom:48%;" /><h2 id="安装VMware-tools">安装VMware tools</h2><blockquote><p>实现主客机之间的复制粘贴功能</p></blockquote><img src="/img/2023/vmtools_file2.png" alt="vmtools_file2" style="zoom:58%;" /><blockquote><p>Open in Terminal</p><p><code>sudo ./vmware-install.pl</code></p></blockquote><img src="/img/2023/vmtools_sudo.png" alt="vmtools_sudo" style="zoom:56%;" /><p>​详情可参阅：<a href="https://blog.csdn.net/davidhzq/article/details/101621482">Vmware虚拟机和主机之间复制粘贴</a></p><ul><li>安装完成后可以实现文件拖拽和ctrl+c、v，复制到Terminal中使用快捷键<code>ctrl+shift+v</code></li></ul><p>==FINAL==</p><p>点击<a href="../works/VirMachine_setup_intro.pdf">下载</a>，可得本篇pdf版文档</p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
